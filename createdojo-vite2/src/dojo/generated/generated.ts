/* Autogenerated file. Do not edit manually. */

import { Account } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { Direction } from "../../utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const contract_name = "actions";

        const spawn = async ({ account }: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const move = async ({
            account,
            direction,
        }: {
            account: Account;
            direction: Direction;
        }) => {
            try {
                return await provider.execute(account, contract_name, "move", [
                    direction,
                ]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        return { move, spawn };
    }

    function lobby_actions() {
        const contract_name = "lobby_actions";

        const createGame = async ({ 
            account, 
            // board_width, 
            // board_height, 
            // maxPlayers, 
            // minStake
            }: { 
                account: Account;
                // board_width: number; 
                // board_height: number;
                // maxPlayers: number;
                // minStake: number;
            }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "createGame",
                    [
                        // board_width, 
                        // board_height, 
                        // maxPlayers, 
                        // minStake
                    ]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const joinGame = async ({ 
            account, 
            game_id }: { 
                account: Account;
                game_id: bigint;
            }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "joinGame",
                    [game_id]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        return { createGame, joinGame };
    }

    function game_actions() {
        const contract_name = "game_actions";

        const startGame = async ({
            account,
            game_id,
        }: {
            account: Account;
            game_id: bigint;
        }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "startGame",
                    [game_id]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        }

        return { startGame };
    }

    return {
        actions: actions(),
        lobby_actions: lobby_actions(),
        game_actions: game_actions()
    };
}
